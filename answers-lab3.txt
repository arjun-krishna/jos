_____________________________________________________________________________________________________

Question 1 :
------------
What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all 
exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation
 could not be provided?)

answer :
--------
JOS cannot detect the type of interrupts it is handling, if there is a single handler function. And also error codes 
are generated only by some interrupts and others don't, so maintaining the struct Trackframe layer becomes difficult 
as it cannot judge when to push dummy error code on to stack.

_____________________________________________________________________________________________________

Question 2 :
------------
Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a
general protection fault (trap 13), but softint's code says int $14. Why should this produce interrupt vector 13? What
happens if the kernel actually allows softint's int $14 instruction to invoke the kernel's page fault handler (which is
interrupt vector 14)? 

answer :
--------
To make the user/softint program behave correctly, the dpl for int 14 should be set to 0.
		SETGATE(gate-13, istrap=0, sel, off, dpl=0)
If the IDT were set up to allow trap 14 to be invoked via int(i.e dpl=3), it directly implies allowing a user process
to produce a page fault explicitly making its memory management brittle.
_____________________________________________________________________________________________________

Question 3 :
------------
The break point test case will either generate a break point exception or a general protection fault depending on how
you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to
set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it
to trigger a general protection fault?

answer :
--------
If the breakpoint interrupt gate dpl is less than 3, a general protection fault will occur instead of a break point
exception when user tries to invoke an breakpoint exception via int. This is because gate isn't setup for user mode 
in dpl=3.
		SETGATE(gate, istrap, sel, off, dpl<3) ---> General protection fault
It the breakpoint interrupt gate dpl is set to 3, the break point exception occurs when int is invoked is user mode.
		SETGATE(gate, istrap, sel, off, dpl=3) ---> Break point exception
_____________________________________________________________________________________________________

Question 4 :
------------
What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

answer :
--------
The user/softinit.c test program tries to invoke a page fault in user mode. If the user process has the permission to
throw a page fault, then it could also throw a page fault for a page that is already residing in the memory which is 
not a good thing. Allowing certain interrupts to be thrown only by kernel mode adds some flexibility in error 
handling, i.e if the page fault can only be thrown in the kernel mode, you can use that trap to allocate pages. 
Morever, if the user program can invoke interrupts that hardware can cause, the user might trick the kernel into 
assuming the hardware has already completed the task which it hasn't.
_____________________________________________________________________________________________________
